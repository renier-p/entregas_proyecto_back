<div class="container mt-5">
    <h2>Carrito de Compras</h2>
    {{#if cart.products.length}}
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre del Producto</th>
                <th>ID</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="cart-products">
            {{#each cart.product}}
            <tr>
                <td>{{this.product.title}}</td>
                <td>{{this_id}}</td>
                <td class="quantity">{{this.quantity}}</td>
                <td class="price">{{this.price}}</td>
                <td>
                    <button class="btn btn-danger" onclick="removeProduct('{{this.product._id}}')">Eliminar</button>
                </td>
            </tr>
            {{/each}}
        </tbody>
        <tfoot>
            <tr>
                <td colspan="2"><strong>Total</strong></td>
                <td><strong id="totalQuantity"></strong></td>
                <td><strong id="totalPrice"></strong></td>
                <td>
                    <button class="btn btn-warning" onclick="clearCart()">Vaciar Carrito</button>
                </td>
            </tr>
        </tfoot>
    </table>
    {{else}}
    <p>No hay productos en el carrito.</p>
    {{/if}}
    <div id="errorContainer" class="mt-3" style="display: none;">
        <div class="alert alert-danger" role="alert" id="errorMessage"></div>
    </div>
</div>

<script>
    async function removeProduct(productId) {
        const cartId = "{{cart._id}}";
        try {
            const response = await fetch(`/api/carts/${cartId}/products/${productId}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                window.location.reload();
            } else {
                const data = await response.json();
                showError(data.message);
            }
        } catch (error) {
            showError('Error eliminando producto del carrito');
        }
    }

    async function clearCart() {
        const cartId = "{{cart._id}}";
        try {
            const response = await fetch(`/api/carts/${cartId}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                window.location.reload();
            } else {
                const data = await response.json();
                showError(data.message);
            }
        } catch (error) {
            showError('Error vaciandoel carrito');
        }
    }

    function showError(message) {
        const errorContainer = document.getElementById('errorContainer');
        const errorMessage = document.getElementById('errorMessage');
        errorMessage.textContent = message;
        errorContainer.style.display = 'block';
    }

    function calculateTotals() {
        const quantities = document.querySelectorAll('.quantity');
        const prices = document.querySelectorAll('.price');
        let totalQuantity = 0;
        let totalPrice = 0;

        quantities.forEach((quantityElement, index) => {
            const quantity = parseInt(quantityElement.textContent, 10);
            const price = parseFloat(prices[index].textContent, 10);
            totalQuantity += quantity;
            totalPrice += quantity * price;
        });

        document.getElementById('totalQuantity').textContent = totalQuantity;
        document.getElementById('totalPrice').textContent = totalPrice.toFixed(2);
    }

    document.addEventListener('DOMContentLoaded', () => {
        calculateTotals();
    });
</script>
