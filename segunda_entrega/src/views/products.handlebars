<div class="container" style="margin-left: 30rem; margin-top: 25px">
    <div class="row">
        <div class="col-md-3">
            <form id="filterForm" class="bg-light p-3 rounded">
                <h4>Filtros</h4>
                <div class="form-group">
                    <label for="query">Categoría:</label>
                    <input type="text" id="query" name="query" class="form-control">
                </div>
                <div class="form-group">
                    <label style="margin-top: 10px;" for="availability">Disponibilidad:</label>
                    <select id="availability" name="availability" class="form-control">
                        <option value="">Todas</option>
                        <option value="available">Disponible</option>
                        <option value="unavailable">No disponible</option>
                    </select>
                </div>
                <div class="form-group">
                    <label style="margin-top: 10px;" for="sort">Ordenar por precio:</label>
                    <select id="sort" name="sort" class="form-control">
                        <option value="">Sin orden</option>
                        <option value="asc">Ascendente</option>
                        <option value="desc">Descendente</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="col-md-9">
            <div id="productsContainer" class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
                {{#each products}}
                <div class="col mb-4">
                    <div class="card h-100 bg-light rounded">
                        <div class="card-header text-white">
                            <i class="bi bi-tag"></i> Código: {{this.code}}
                        </div>
                        
                        <div class="card-body">
                            <h5 class="card-title text-dark">{{this.title}}</h5>
                            <ul class="list-unstyled">
                                <li><i class="bi bi-file-text"></i> Id del producto: {{this._id}}</li>
                                <li><i class="bi bi-file-text"></i> Descripción: {{this.description}}</li>
                                <li><i class="bi bi-currency-dollar"></i> Precio: ${{this.price}}</li>
                                <li><i class="bi bi-grid"></i> Categoría: {{this.category}}</li>
                                <li><i class="bi bi-check-circle"></i> Estado: {{this.status}}</li>
                                <li>
                                    <i class="bi bi-image"></i> Imagen: <img src="{{this.thumbnail}}" alt="{{this.title}}" class="img-fluid mt-2">
                                </li>
                            </ul>
                            <div class="text-center mt-3">
                                <button data-value="{{this.stock}}" id="{{this.product}}" class="btn btn-primary" >Agregar al carrito</button>
                            </div>
                        </div>
                    </div>
                </div>
                {{/each}}
            </div>

            <div id="pagination" class="d-flex justify-content-between mt-4">
                {{#if hasPrevPage}}
                <a href="{{prevLink}}" class="btn btn-primary">Pag Ant</a>
                {{else}}
                <span class="btn btn-secondary disabled">Pag Ant</span>
                {{/if}}

                <span>Página {{page}} de {{totalPages}}</span>

                {{#if hasNextPage}}
                <a href="{{nextLink}}" class="btn btn-primary">Pag Sig</a>
                {{else}}
                <span class="btn btn-secondary disabled">Pag Sig</span>
                {{/if}}
            </div>

        </div>
    </div>
</div>


<script>
document.getElementById('filterForm').addEventListener('change', function() {
    fetchProducts();
});

let cart;
async function fetchProducts(page = 1) {
    const createCart = await fetch('/api/carts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                cart = await createCart.json()
                console.log(cart)
    const query = document.getElementById('query').value;
    const availability = document.getElementById('availability').value;
    const sort = document.getElementById('sort').value;
    const limit = 6;

    const url = new URL('/api/products', window.location.origin);
    url.searchParams.set('query', query);
    url.searchParams.set('availability', availability);
    url.searchParams.set('sort', sort);
    url.searchParams.set('page', page);
    url.searchParams.set('limit', limit);

    const response = await fetch(url);
    const data = await response.json();

    renderProducts(data.payload);
    renderPagination(data);
}

function renderProducts(products) {
    const container = document.getElementById('productsContainer');
    container.innerHTML = '';

    products.forEach(product => {
        const productCard = `
            <div class="col mb-4">
                <div class="card h-100 bg-light">
                    <div class="card-header text-white" style="background: rgb(191, 191, 191)">
                        <i class="bi bi-tag"  ></i> Código: ${product.code}
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-dark">${product.title}</h5>
                        <ul class="list-unstyled">
                            <li><i class="bi bi-file-text"></i> ID: ${product._id}</li>
                            <li><i class="bi bi-file-text"></i> Descripción: ${product.description}</li>
                            <li><i class="bi bi-currency-dollar"></i> Precio: $${product.price}</li>
                            <li><i class="bi bi-grid"></i> Categoría: ${product.category}</li>
                            <li><i class="bi bi-check-circle"></i> Estado: ${product.status}</li>
                            <li><i class="bi bi-file-text"></i> Stock: ${product.stock}</li>
                            <li>
                                <i class="bi bi-image"></i> Imagen: <img src="${product.thumbnail}" alt="${product.title}" class="img-fluid mt-2">
                            </li>
                        </ul>
                        <div class="text-center mt-3">
                            <button class="btn text-lg product" style="background-color: #ff6600; border-color: #ff6600; color: white" data-value="${product.stock}" id="${product._id}">Agregar al carrito</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        container.innerHTML += productCard;
    });

    document.querySelectorAll('.product').forEach(button => {
        button.addEventListener('click', addToCart);
    });
}

function renderPagination(data) {
    const pagination = document.getElementById('pagination');
    pagination.innerHTML = '';

    const prevPage = data.hasPrevPage ? `<a href="#" onclick="fetchProducts(${data.prevPage})" class="btn btn-primary">Pag Ant</a>` : `<span class="btn btn-secondary disabled">Pag Ant</span>`;
    const nextPage = data.hasNextPage ? `<a href="#" onclick="fetchProducts(${data.nextPage})" class="btn btn-primary">Pag Sig</a>` : `<span class="btn btn-secondary.disabled">Pag Sig</span>`;
    
    pagination.innerHTML = `
        ${prevPage}
        <span>Página ${data.page} of ${data.totalPages}</span>
        ${nextPage}
    `;
}


async function addToCart(event) {
    const productId = event.target.id;
    const stock = Number(event.target.getAttribute('data-value'));
    const { value: quantity } = await Swal.fire({
        title: 'Agregue cantidad',
        input: 'number',
        inputAttributes: {
            autocapitalize: 'off'
        },
        showCancelButton: true,
        confirmButtonText: 'Confirmar',
        confirmButtonColor: '#ff6600'
    });

    if (quantity !== null) {
        const quantityNumber = Number(quantity);
        if (quantityNumber > 0 && stock >= quantityNumber) {
            try {
                const response = await fetch(`/api/carts/${cart._id}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ "productId": productId, "quantity": quantityNumber }),
                });
                if (response.ok) {
                    const data = await response.json();
                    Swal.fire({
                        title: 'Producto agregado',
                        text: `ID: ${productId} - Cantidad: ${quantityNumber}`,
                        icon: 'success',
                    });
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'Hubo un error agregando el producto',
                        icon: 'error',
                    });
                }
            } catch (error) {
                console.error('Error al agregar el producto:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Hubo un error agregando el producto',
                    icon: 'error',
                });
            }
        } else if (quantityNumber <= 0) {
            Swal.fire({
                title: 'Debe ser mayor a 0',
                icon: 'warning',
                confirmButtonColor: '#ff6600',
                confirmButtonText: "Aceptar"
            });
        } else {
            Swal.fire({
                title: 'Es mayor que el stock',
                icon: 'error',
                confirmButtonColor:'#ff6600',
                confirmButtonText: "Aceptar"

            });
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
});
</script>